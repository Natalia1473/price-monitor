"""
price_monitor.py
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ü–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞/–∫–∞—Ç–∞–ª–æ–≥–∞ –∏ —à–ª—ë—Ç
—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ ‚â• THRESHOLD %.

‚Ä¢ –£—Å–ª–æ–≤–∏—è (env-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∑–∞–¥–∞—é—Ç—Å—è –≤ Secrets —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è):
  BOT_TOKEN        ‚Äì —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
  CHAT_ID          ‚Äì chat-id (integer) –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  URL              ‚Äì —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
  SELECTOR_NAME    ‚Äì CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
  SELECTOR_PRICE   ‚Äì CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä —Ü–µ–Ω—ã
  THRESHOLD        ‚Äì –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""

from __future__ import annotations

import asyncio
import json
import os
from pathlib import Path
from typing import Final

import pandas as pd
from dotenv import load_dotenv
from playwright.async_api import async_playwright
from telegram import Bot

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–Ω—Ñ–∏–≥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
DATA_FILE: Final[Path] = Path("prices.json")
load_dotenv()  # —á–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env –∏–ª–∏ Secrets)

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID", "0"))
URL = os.getenv("URL")
SEL_NAME = os.getenv("SELECTOR_NAME")
SEL_PRICE = os.getenv("SELECTOR_PRICE")
THRESHOLD = float(os.getenv("THRESHOLD", "1"))  # %


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤—Å–ø–æ–º-—Ñ—É–Ω–∫—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _clean_price(text: str) -> float:
    """–ü—Ä–∏–≤–æ–¥–∏—Ç '‚Ç¨ 1 234,56' ‚Üí 1234.56"""
    digits = "".join(ch for ch in text if ch.isdigit() or ch in ",.")
    return float(digits.replace(",", ".") or 0)


async def scrape() -> pd.DataFrame:
    """–°–æ–±–∏—Ä–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Ü–µ–Ω—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã URL."""
    async with async_playwright() as p:
        browser = await p.firefox.launch(headless=True)
        page = await browser.new_page()
        await page.goto(URL, wait_until="networkidle", timeout=60_000)

        names = await page.locator(SEL_NAME).all_text_contents()
        prices_raw = await page.locator(SEL_PRICE).all_text_contents()
        await browser.close()

    df = pd.DataFrame(
        {
            "name": [n.strip() for n in names],
            "price": [_clean_price(p) for p in prices_raw],
        }
    )
    return df


def diff(prev: pd.DataFrame, curr: pd.DataFrame) -> pd.DataFrame:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã —Å –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–π —Ü–µ–Ω–æ–π ‚â• THRESHOLD %."""
    merged = curr.merge(prev, on="name", how="left", suffixes=("", "_old"))
    merged["delta"] = (
        (merged["price"] - merged["price_old"]) / merged["price_old"] * 100
    ).round(2)
    changed = merged[merged["delta"].abs() >= THRESHOLD].dropna()
    return changed[["name", "price_old", "price", "delta"]]


async def notify(bot: Bot, rows: pd.DataFrame) -> None:
    """–®–ª—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ü–µ–Ω."""
    lines = [
        f"üí± <b>{r.name}</b>\n   {r.price_old:.2f} ‚Üí {r.price:.2f} "
        f"({r.delta:+.1f} %)"
        for r in rows.itertuples(index=False)
    ]
    text = "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω:\n\n" + "\n\n".join(lines)
    await bot.send_message(chat_id=CHAT_ID, text=text, parse_mode="HTML")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    if not all([BOT_TOKEN, CHAT_ID, URL, SEL_NAME, SEL_PRICE]):
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    bot = Bot(BOT_TOKEN, parse_mode=None)
    curr = await scrape()

    if DATA_FILE.exists():
        prev = pd.read_json(DATA_FILE)
        changes = diff(prev, curr)
        if not changes.empty:
            await notify(bot, changes)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–µ–Ω
    curr.to_json(DATA_FILE, orient="records", force_ascii=False, indent=2)


if __name__ == "__main__":
    asyncio.run(main())
