# price_monitor.py
"""
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ü–µ–Ω—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∞–π—Ç–∞—Ö –∏ —à–ª—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
–ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã ‚â• THRESHOLD%.

–§–∞–π–ª—ã:
  - config.json    ‚Äî –º–∞—Å—Å–∏–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å–∞–π—Ç–æ–≤ (URL + —Å–µ–ª–µ–∫—Ç–æ—Ä—ã)
  - history/       ‚Äî –ø–∞–ø–∫–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤ —Ü–µ–Ω –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∞–π—Ç—É
  - price_monitor.py
  - requirements.txt
"""

import json
import os
import asyncio
from pathlib import Path

import pandas as pd
from playwright.async_api import async_playwright
from telegram import Bot
from dotenv import load_dotenv

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()  # –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç .env (–ª–æ–∫–∞–ª—å–Ω–æ) –∏–ª–∏ Secrets (–≤ Actions)

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID   = int(os.getenv("CHAT_ID", "0"))
THRESHOLD = float(os.getenv("THRESHOLD", "1"))  # –ø—Ä–æ—Ü–µ–Ω—Ç—ã

if not all([BOT_TOKEN, CHAT_ID]):
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏–ª–∏ CHAT_ID")

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞
HISTORY_DIR = Path("history")
HISTORY_DIR.mkdir(exist_ok=True)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ —Å–∞–π—Ç–æ–≤
with open("config.json", encoding="utf-8") as cfg:
    SITES = json.load(cfg)


async def scrape_site(url: str, sel_name: str, sel_price: str) -> pd.DataFrame:
    """–°–æ–±–∏—Ä–∞–µ—Ç DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ ['name','price'] –¥–ª—è –æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    async with async_playwright() as p:
        browser = await p.firefox.launch(headless=True)
        page = await browser.new_page()
        # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–∏–Ω–∏–º—É–º DOM, –±–µ–∑ –¥–æ–ª–≥–æ–≥–æ networkidle
        try:
            await page.goto(url, timeout=120_000, wait_until="domcontentloaded")
        except Exception:
            # –µ—Å–ª–∏ –≤—Å—ë —Ä–∞–≤–Ω–æ —Ç–∞–π–º–∞—É—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–æ, —á—Ç–æ —É—Å–ø–µ–ª–æ –ø—Ä–æ–≥—Ä—É–∑–∏—Ç—å—Å—è
            pass

        names_raw  = await page.locator(sel_name).all_text_contents()
        prices_raw = await page.locator(sel_price).all_text_contents()
        await browser.close()

    # –û—á–∏—â–∞–µ–º —Ü–µ–Ω—É –≤–∏–¥–∞ "155 028 ‚ÇΩ" ‚Üí 155028.0
    prices = [
        float("".join(ch for ch in txt if ch.isdigit() or ch in ".,").replace(",", ".") or 0)
        for txt in prices_raw
    ]
    # –°—Ç—Ä–∏–ø–∏–º –∏–º–µ–Ω–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    names = [n.strip() for n in names_raw]
    return pd.DataFrame({"name": names, "price": prices})


async def main() -> None:
    bot = Bot(BOT_TOKEN)
    all_changes = []

    for site in SITES:
        df = await scrape_site(site["url"], site["selector_name"], site["selector_price"])
        hist_file = HISTORY_DIR / f"{site['name'].replace(' ', '_')}.json"

        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è ‚Äî —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
        if hist_file.exists():
            prev = pd.read_json(hist_file)
            merged = df.merge(prev, on="name", how="left", suffixes=("", "_old"))
            merged["delta"] = ((merged["price"] - merged["price_old"])
                               / merged["price_old"] * 100).round(2)
            changed = merged[merged["delta"].abs() >= THRESHOLD].dropna()
            if not changed.empty:
                changed["site"] = site["name"]
                all_changes.append(changed[["site","name","price_old","price","delta"]])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Å–Ω–∏–º–æ–∫
        df.to_json(hist_file, orient="records", force_ascii=False, indent=2)

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –æ–¥–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ ‚Äî —à–ª—ë–º –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if all_changes:
        lines = []
        for df in all_changes:
            for r in df.itertuples(index=False):
                lines.append(
                    f"üí± <b>{r.site}</b>: {r.name}\n"
                    f"   {r.price_old:.2f} ‚Üí {r.price:.2f} ({r.delta:+.1f}%)"
                )
        text = "‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω:\n\n" + "\n\n".join(lines)
        await bot.send_message(chat_id=CHAT_ID, text=text, parse_mode="HTML")


if __name__ == "__main__":
    asyncio.run(main())
