# price_monitor.py
"""
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ü–µ–Ω—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∞–π—Ç–∞—Ö –∏ —à–ª—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
–ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã ‚â• THRESHOLD%.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞:
  ‚îú‚îÄ config.json    ‚Äì –º–∞—Å—Å–∏–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å–∞–π—Ç–æ–≤
  ‚îú‚îÄ history/       ‚Äì –ø–∞–ø–∫–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –∫–∞–∂–¥–æ–≥–æ —Å–∞–π—Ç–∞
  ‚îú‚îÄ price_monitor.py
  ‚îî‚îÄ requirements.txt
"""

import json
import os
import asyncio
from pathlib import Path

import pandas as pd
from playwright.async_api import async_playwright
from telegram import Bot
from dotenv import load_dotenv

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()  # –ª–æ–∫–∞–ª—å–Ω–æ —á–∏—Ç–∞–µ—Ç .env, –Ω–∞ Actions ‚Äì Secrets

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID   = int(os.getenv("CHAT_ID", "0"))
THRESHOLD = float(os.getenv("THRESHOLD", "1"))

if not BOT_TOKEN or not CHAT_ID:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏–ª–∏ CHAT_ID")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ò—Å—Ç–æ—Ä–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
HISTORY_DIR = Path("history")
HISTORY_DIR.mkdir(exist_ok=True)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–Ω—Ñ–∏–≥ —Å–∞–π—Ç–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
with open("config.json", encoding="utf-8") as f:
    SITES = json.load(f)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –§—É–Ω–∫—Ü–∏—è —Å–∫—Ä–µ–π–ø–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def scrape_site(name: str, url: str, sel_name: str, sel_price: str) -> pd.DataFrame:
    """–°–æ–±–∏—Ä–∞–µ—Ç DataFrame {name, price} –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∞–π—Ç–∞."""
    async with async_playwright() as p:
        browser = await p.firefox.launch(headless=True)
        page = await browser.new_page()

        try:
            await page.goto(url, timeout=120_000, wait_until="domcontentloaded")
        except Exception:
            # —Ç–∞–π–º–∞—É—Ç –∏–ª–∏ networkidle ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–º, —á—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
            pass

        raw_names  = await page.locator(sel_name).all_text_contents()
        raw_prices = await page.locator(sel_price).all_text_contents()
        await browser.close()

    names  = [n.strip() for n in raw_names]
    prices = [
        float("".join(ch for ch in p if ch.isdigit() or ch in ".,").replace(",", ".") or 0)
        for p in raw_prices
    ]
    print(f"[{name}] —Å–æ–±—Ä–∞–Ω–æ {len(names)} –ø–æ–∑–∏—Ü–∏–π")  # –æ—Ç–ª–∞–¥–∫–∞
    return pd.DataFrame({"name": names, "price": prices})

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    bot = Bot(BOT_TOKEN)
    all_changes = []

    for site in SITES:
        df = await scrape_site(
            site["name"],
            site["url"],
            site["selector_name"],
            site["selector_price"],
        )

        hist_file = HISTORY_DIR / f"{site['name'].replace(' ', '_')}.json"
        if hist_file.exists():
            prev = pd.read_json(hist_file)
            merged = df.merge(prev, on="name", how="left", suffixes=("", "_old"))
            merged["delta"] = ((merged["price"] - merged["price_old"])
                               / merged["price_old"] * 100).round(2)
            changed = merged[merged["delta"].abs() >= THRESHOLD].dropna()

            if not changed.empty:
                changed["site"] = site["name"]
                all_changes.append(changed[["site","name","price_old","price","delta"]])

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        df.to_json(hist_file, orient="records", force_ascii=False, indent=2)

    # –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –ø–æ —Å–∞–π—Ç–∞–º
    for df in all_changes:
        print(f"{df.iloc[0]['site']}: –Ω–∞–π–¥–µ–Ω–æ {len(df)} –∏–∑–º–µ–Ω–µ–Ω–∏–π")

    if all_changes:
        lines = []
        for df in all_changes:
            for r in df.itertuples(index=False):
                lines.append(
                    f"üí± <b>{r.site}</b>: {r.name}\n"
                    f"   {r.price_old:.2f} ‚Üí {r.price:.2f} ({r.delta:+.1f}%)"
                )
        text = "‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω:\n\n" + "\n\n".join(lines)
        await bot.send_message(chat_id=CHAT_ID, text=text, parse_mode="HTML")

if __name__ == "__main__":
    asyncio.run(main())
